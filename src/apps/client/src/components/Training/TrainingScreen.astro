---
const { ...props } = Astro.props;
---

<training-screen {...props}>
  <img id="training-state-icon" src="" />
</training-screen>
<script>
  import globalStore from "/src/stores/global.store.js";

  class TrainingScreen extends HTMLElement {
    constructor() {
      super();

      this.className = "w-full h-full flex items-center justify-center";

      const trainingStateText = document.getElementById("training-state-text");
      const trainingStateIcon = document.getElementById("training-state-icon");

      globalStore.__fns.subscribe((v) => {
        this.updateState(trainingStateText, trainingStateIcon);
      });

      this.updateState(trainingStateText, trainingStateIcon);
    }

    updateState(trainingStateText, trainingStateIcon) {
      this.setBgColor();

      trainingStateText.innerHTML = `${
        globalStore.ui.trainingState.text[globalStore.ui.trainingState.state]
      } ${["rest", "action"].includes(globalStore.ui.trainingState.state) ? globalStore.ui.trainingState.trialCount : ""}`;

      // Set training icon image based on state
      // @ts-ignore
      trainingStateIcon.src = `/images/training/${globalStore.ui.trainingState.icon[globalStore.ui.trainingState.state]}.png`;
    }

    setBgColor() {
      for (const bg of Object.values(this.classList)) {
        if (bg.startsWith("bg-")) {
          this.classList.remove(bg);
        }
      }
      this.classList.add(
        globalStore.ui.trainingState.bgColors[
          globalStore.ui.trainingState.state
        ]
      );
    }

    connectedCallback() {}
  }

  customElements.define("training-screen", TrainingScreen);
</script>
