---
const { ...props } = Astro.props;
---

<training-screen {...props}>

</training-screen>

<script type="module">
  import globalStore from "/src/stores/global.store.js";

  const loadSocialMedia = () => {
    // @ts-ignore
    window.api.send("toMain", {
      id: "req:load-social-media",
      data: {
        socialMediaURL:
          globalStore.settings.options.socialMedia[
            globalStore.settings.selected.socialMedia
          ].url,
      },
    });
  };

  if (typeof window.api !== "undefined") loadSocialMedia();
</script>
<script>
  // @ts-nocheck
  import globalStore from "/src/stores/global.store.js";
  import { subscribeKey } from "valtio/utils";

  class TrainingScreen extends HTMLElement {
    constructor() {
      super();

      this.className = "w-full h-full flex items-center justify-center";

      this.trainingStateListener = subscribeKey(
        globalStore.ui.trainingState,
        "state",
        (v) => {
          this.setUIState();
        }
      );

      this.setUIState();
    }

    setUIState() {
      const overlayImage = document.getElementById("overlay-icon");
      const trainingStateText = document.getElementById("training-state-text");
      const trainingStateIcon = document.getElementById("training-state-icon");

      this.setBgColor();

      trainingStateText.innerHTML = `${
        globalStore.ui.trainingState.text[globalStore.ui.trainingState.state]
      } ${["rest", "action"].includes(globalStore.ui.trainingState.state) ? globalStore.ui.trainingState.trialCount : ""}`;

      // Set training icon image based on state and selected movement
      const movementSelected = globalStore.settings.selected.movement;
      const trainingState = globalStore.ui.trainingState.state;
      trainingStateIcon.src = `/images/${globalStore.ui.trainingState.icon[movementSelected][trainingState]}.png`;
      overlayImage.src = `/images/${globalStore.ui.trainingState.celebrate[trainingState]}.png`;
      }


    setBgColor() {
      for (const bg of Object.values(this.classList)) {
        if (bg.startsWith("bg-")) {
          this.classList.remove(bg);
        }
      }
      this.classList.add(
        globalStore.ui.trainingState.bgColors[
          globalStore.ui.trainingState.state
        ]
      );
    }

    connectedCallback() {}

    disconnectedCallback() {
      this.trainingStateListener(); // unsubscribe on element removal
    }
  }

  customElements.define("training-screen", TrainingScreen);
</script>
