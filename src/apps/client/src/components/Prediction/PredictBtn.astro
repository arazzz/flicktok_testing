---
const { ...props } = Astro.props;
---

<predict-btn {...props}></predict-btn>

<script>
  import globalStore from "/src/stores/global.store.js";
  import { subscribeKey } from "valtio/utils";

  class PredictBtn extends HTMLElement {
    constructor() {
      super();

      this.classList.add("btn", "btn-neutral", "btn-disabled");

      if (globalStore.ui.videoState.isPlaying)
        this.classList.remove("btn-disabled");

      globalStore.ui.predictionBtn.state = "running";
      // globalStore.ui.predictionBtn.state =
      //   globalStore.ui.predictionState.state === "stop" ? "running" : "idle";
      this.toggleBtnState();
    }

    toggleBtnState() {
      if (globalStore.ui.predictionBtn.state === "idle") {
        globalStore.ui.predictionBtn = {
          text: "Stop predictions",
          state: "running",
        };
      } else if (globalStore.ui.predictionBtn.state === "running") {
        globalStore.ui.predictionBtn = {
          text: "Start predictions",
          state: "idle",
        };
      }
      this.innerHTML = globalStore.ui.predictionBtn.text;
    }

    handleClick() {
      // @ts-ignore
      window.api.send("toMain", {
        id: "set-prediction-btn-state",
        data: globalStore.ui.predictionBtn.state === "idle" ? "start" : "stop",
      });
      this.toggleBtnState();
    }

    connectedCallback() {
      this.addEventListener("click", this.handleClick);

      // @ts-ignore
      this.videoPlayingListener = subscribeKey(
        globalStore.ui.videoState,
        "isPlaying",
        (v) => {
          if (v) this.classList.remove("btn-disabled");
          if (!v) this.classList.add("btn-disabled");
        }
      );
    }

    disconnectedCallback() {
      // @ts-ignore
      this.videoPlayingListener(); // unsubscribe on element removal
    }
  }

  customElements.define("predict-btn", PredictBtn);
</script>
