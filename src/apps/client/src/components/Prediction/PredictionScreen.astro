---
const { ...props } = Astro.props;
---

<prediction-screen {...props}></prediction-screen>

<script type="module">
  import globalStore from "/src/stores/global.store.js";

  const loadSocialMedia = () => {
    // @ts-ignore
    window.api.send("toMain", {
      id: "req:load-social-media",
      data: {
        socialMediaURL:
          globalStore.settings.options.socialMedia[
            globalStore.settings.selected.socialMedia
          ].url,
      },
    });
  };

  if (typeof window.api !== "undefined") loadSocialMedia();
</script>
<script>
  // @ts-nocheck
  import globalStore from "/src/stores/global.store.js";
  import { subscribeKey } from "valtio/utils";

  class PredictionScreen extends HTMLElement {
    constructor() {
      super();

      this.className = "w-full h-full flex items-center justify-center";

      this.predictionStateListener = subscribeKey(
        globalStore.ui.predictionState,
        "state",
        (v) => {
          this.setUIState();
        }
      );

      this.setUIState();
    }

    setUIState() {
      const predictionStateText = document.getElementById(
        "prediction-state-text"
      );
      const predictionStateIcon = document.getElementById(
        "prediction-state-icon"
      );

      this.setBgColor();

      predictionStateText.innerHTML = `${
        globalStore.ui.predictionState.text[
          globalStore.ui.predictionState.state
        ]
      }`;

      // Set prediction screen header icon image based on state and selected movement
      const movementSelected = globalStore.settings.selected.movement;
      const predictionState = globalStore.ui.predictionState.state;
      predictionStateIcon.src = `/images/prediction/${globalStore.ui.predictionState.icon[movementSelected][predictionState]}.png`;
    }

    setBgColor() {
      for (const bg of Object.values(this.classList)) {
        if (bg.startsWith("bg-")) {
          this.classList.remove(bg);
        }
      }
      this.classList.add(
        globalStore.ui.predictionState.bgColors[
          globalStore.ui.predictionState.state
        ]
      );
    }

    connectedCallback() {}

    disconnectedCallback() {
      this.predictionStateListener(); // unsubscribe on element removal
    }
  }

  customElements.define("prediction-screen", PredictionScreen);
</script>
